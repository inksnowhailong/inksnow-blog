# 用于将静态内容部署到 GitHub Pages 的简单工作流
name: Deploy static content to Pages

on:
  # 在推送到默认分支时运行
  push:
    branches: ["master"]

  # 允许从 Actions 选项卡手动运行此工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 仅允许一个并发部署，跳过正在进行的运行和最新排队之间排队的运行。
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成。
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 单个部署作业，因为我们只是部署
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          # 选择要使用的 pnpm 版本
          version: 9
          # 使用 pnpm 安装依赖
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # 或者根据项目需求指定其他 Node.js 版本
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build project
        run: npm run build # 执行打包命令

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 上传整个仓库
          path: "./docs/.vuepress/dist"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      # 步骤 5：上传构建文件到服务器

      - name: Deploy to Server
        env:
          DEPLOY_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # 使用 SSH 密钥进行安全连接
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}  # 服务器 IP 地址
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

          # 设置 SSH 密钥
          echo "$DEPLOY_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          # 将构建后的文件通过 SCP 上传到服务器
          scp -i private_key.pem -r ./docs/.vuepress/dist/* $SERVER_USER@$SERVER_IP:/www/wwwroot/inksnowhl.cn  # 假设构建输出目录为 ./dist

          # 在服务器上运行命令，更新前端服务
          ssh -i private_key.pem $SERVER_USER@$SERVER_IP << EOF
            # 确保 Nginx 已经配置好
            sudo systemctl reload nginx  # 如果 Nginx 配置文件有改动，重载 Nginx
          EOF

